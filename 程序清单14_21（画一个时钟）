import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Line;
import javafx.scene.text.Text;
import javafx.stage.Stage;

import java.util.Calendar;
import java.util.GregorianCalendar;

public class Main extends Application {
    public void start(Stage primaryStage) {
        ClockPane clockPane = new ClockPane();
        primaryStage.setScene(new Scene(clockPane));
        primaryStage.show();
    }
}

class ClockPane extends Pane {
    private int hour, minute, second;
    private double w = 300, h = 300;

    public ClockPane() {
        setCurrentTime();
    }

    public ClockPane(int hour, int minute, int second) {
        this.hour = hour;
        this.minute = minute;
        this.second = second;
        paintClock();
    }

    public void setCurrentTime() {
        Calendar calendar = new GregorianCalendar();
        this.hour = calendar.get(Calendar.HOUR_OF_DAY);
        this.minute = calendar.get(Calendar.MINUTE);
        this.second = calendar.get(Calendar.SECOND);

        paintClock();
    }

    public int getHour() {
        return hour;
    }

    public int getMinute() {
        return minute;
    }

    public int getSecond() {
        return second;
    }

    protected void paintClock() {
        double clockRadius = Math.min(w, h) * 0.4;
        double centerX = w / 2.0;
        double centerY = h / 2.0;

        Circle circle = new Circle(centerX, centerY, clockRadius);
        circle.setFill(Color.BLACK);
        circle.setStroke(Color.WHITE);

        Text[] texts = new Text[12];
        for (int i = 0; i < 12; ++i) {
            if (i == 0) {
                texts[i] = new Text(centerX + (clockRadius - 10) * Math.sin(i * 2 * Math.PI / 12), centerY - (clockRadius - 10) * Math.cos(i * 2 * Math.PI / 12), 12 + "");
            } else {
                texts[i] = new Text(centerX + (clockRadius - 10) * Math.sin(i * 2 * Math.PI / 12), centerY - (clockRadius - 10) * Math.cos(i * 2 * Math.PI / 12), i + "");
            }
            texts[i].setStroke(Color.WHITE);
        }

        double sLength = clockRadius * 0.8;
        double secondX = centerX + sLength * Math.sin(second * (2 * Math.PI) / 60);
        double secondY = centerY - sLength * Math.cos(second * (2 * Math.PI) / 60);
        Line sLine = new Line(centerX, centerY, secondX, secondY);
        sLine.setStroke(Color.WHITE);

        double mLength = clockRadius * 0.6;
        double minuteX = centerX + mLength * Math.sin(minute * 2 * Math.PI / 60);
        double minuteY = centerY - mLength * Math.cos(minute * 2 * Math.PI / 60);
        Line mLine = new Line(centerX, centerY, minuteX, minuteY);
        mLine.setStroke(Color.WHITE);

        double hLength = clockRadius * 0.45;
        double hourX = centerX + hLength * Math.sin((hour % 12 + minute / 60.0) * 2 * Math.PI / 12);
        double hourY = centerY - hLength * Math.cos((hour % 12 + minute / 60.0) * 2 * Math.PI / 12);
        Line hLine = new Line(centerX, centerY, hourX, hourY);
        hLine.setStroke(Color.WHITE);

        getChildren().clear();
        getChildren().addAll(circle, sLine, mLine, hLine);
        for (Text each : texts) {
            getChildren().add(each);
        }
    }
}
